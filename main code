import pygame
pygame.init()

print(pygame.font.get_fonts())
screen = pygame.display.set_mode((640,640))
pygame.display.set_caption('The One Who Hides')
clock = pygame.time.Clock()
#cocunut jpg(mysterious variable that breaks game if deleted)
i=False
#Image declerations---------------------------------------------
tempimage = pygame.image.load('warrior.png')
image=pygame.Surface.convert_alpha(tempimage)
image1 = pygame.image.load('warrior3.png')
floor = pygame.image.load('floor1.png')
wall = pygame.image.load('wall.png')
door = pygame.image.load('door.png')
boom = pygame.image.load('boom.png')
green = pygame.image.load('64green.png')
red = pygame.image.load('64red.png')
#Text declerations-------excluding variable tracking text------
font = pygame.font.Font('freesansbold.ttf',20)
text = font.render('Bow:100 moneys',1,(255,255,255))
text1 = font.render('Health+50:25 moneys',1,(255,255,255))
text2 = font.render('Player hit cooldown:     /95',1,(255,255,255))
text3 = font.render('Enemy hit cooldown:     /34',1,(255,255,255))
text4 = font.render('Bow charge: ',1,(255,255,255))
text5 = font.render('Money: ',1,(255,255,255))
text13= font.render('/200',1,(255,255,255))
text20= font.render('Agile:200 moneys',1,(255,255,255))
text30= font.render('Pew Pew',1,(255,255,255))
text31= font.render('I dont know pretty',1,(255,255,255))
text311= font.render('self explanatory',1,(255,255,255))
text32= font.render('You move like gay',1,(255,255,255))
text321= font.render('man reload arrows',1,(255,255,255))
text322= font.render('while you move',1,(255,255,255))
text50= font.render('CONTROLS:MOVE;up,down,left,rigth ATTACK;space bar BOW;"a"',1,(255,255,255))
text51= font.render('SHOP;"t" PLAY;"Y"and"c" stand on the shop boxes to buy',1,(255,255,255))
#gamestates declerations----------------------------------------
PLAYING=0
SHOPPING=1
PLAY = 0
SHOP = 1
game_state = PLAYING
pressed = [False, False]
#Game varibles--------------------------------------------------
#player variables
money=0
xpos = 300 
ypos = 480
HP=100#player health
PD=10#player damage
#enemy variables
HE=10#enemy health
ED=30 #enemy damage
ex=300
ey=160
ET=[False,False,False,False,False,False,False,True]#enemy type= last laugh, normal, fire, water, earth, wind, enraged, bulky
#animation variables
counter1=0
counter=1
counter2=0
counter3=0
direction = 3 #0 is left, 1 is right, 2 is up, 3 is down
#sprint and moevement function variable
d1=False
#number holding variables for timing
text15 = font.render(str(int(money)),1,(255,255,255))
z=0
text12 = font.render(str(int(z)),1,(255,255,255))
w=0
text14 = font.render(str(int(w)),1,(255,255,255))
q=0
x=0
text21 = font.render(str(int(x)),1,(255,255,255))
y=0
text11 = font.render(str(int(y)),1,(255,255,255))
#upgrades
Agile=False#reload while moving
Bow=False#bow
#bow/arrow variables
bow=False#arrow boolean 
bx=xpos
by=ypos
direction1=0#arrow direction based on player direction
d=4#direction holding variable
#all market functions control buying an upgrade
def market():
    global money
    global z
    global Bow
    #if they stand in box ability to buy=True
    if xpos>64*3 and xpos<64*4 and ypos>64*2 and ypos<64*3:
        if z<200:
            z+=1
            text12 = font.render(str(int(z)),1,(255,255,255))
            screen.blit(text12, (64*3,64*2))
            screen.blit(text13, (64*3,64*2+20))
        if z==200 and money>=100:
            Bow=True
            print("its pizza time, i mean bow")
            money-=100
    else:
        z=0
def market1():
    global money
    global z
    global HP
    #if they stand in box ability to buy=True
    if xpos>64*6 and xpos<64*7 and ypos>64*2 and ypos<64*3:
        if z<200:
            z+=1
            text12 = font.render(str(int(z)),1,(255,255,255))
            screen.blit(text12, (64*6,64*2))
            screen.blit(text13, (64*6,64*2+20))
        if z==200 and money>=25:
            HP+=50
            if HP>100:
                HP=100
            print("its pizza time, i mean +50 health")
            money-=25
            z=0
            print(HP)
    else:
        z=0
def market2():
    global money
    global z
    global Agile
    #if they stand in box ability to buy=True
    if xpos>64*3 and xpos<64*4 and ypos>64*5 and ypos<64*6:
        if z<200 and money>=200 and Bow==True:
            z+=1
            text12 = font.render(str(int(z)),1,(255,255,255))
            screen.blit(text12, (64*3,64*5))
            screen.blit(text13, (64*3,64*5+20))
        if z==200 and money>=200:
            Agile=True
            print("its pizza time, i mean Agile")
            money-=200
    else:
        z=0
#controls direction, and speed
def enemymove():
    global ey
    global ex
    global direction1
    if ey>ypos and ET[6]==True:#ET6 controls enraged so itll make the nemy faster
        ey-=2
        direction1=3
    if ey<ypos and ET[6]==True:
        ey+=2
        direction1=2
    if ex>xpos and ET[6]==True:
        ex-=2
        direction1=0
    if ex<xpos and ET[6]==True:
        ex+=1
        direction1=1
    if ey>ypos and ET[6]==False:
        ey-=1
        direction1=3
    if ey<ypos and ET[6]==False:
        ey+=1
        direction1=2
    if ex>xpos and ET[6]==False:
        ex-=1
        direction1=0
    if ex<xpos and ET[6]==False:
        ex+=1
        direction1=1
#control detection, reload, hitting key detection, and attacking math
def playerattack():
    global HP#player health
    global HE#enemy health
    global PD#player damage
    global w
    text14 = font.render(str(int(w)),1,(255,255,255))
    #timer
    if w<95:
        w+=1
        text14 = font.render(str(int(w)),1,(255,255,255))
    #if player is close or inside enemy ability to attack=True
    if xpos+5<ex+54 and xpos+54>ex+5 and ypos+2<ey+61 and ypos+61>ey+2:
            if keys[pygame.K_SPACE] and w==95:
                print("hit")
                w=0
                HE-=PD*2
                print("enemy, ",HE)
                if ET[0]==True:
                    HP-=PD
                    print("player, ",HP)
    screen.blit(text14, (205,16))
#same thing as player attack but for the enemy
def enemyattack():
    global HP#player health
    global HE#enemy health
    global PD#player damage
    global ED#enemy damage
    global y
    global q
    if q<190:
        q+=1
    if ex+5<xpos+54 and ex+54>xpos+5 and ey+2<ypos+61 and ey+61>ypos+2 and q==190:
        if y<25:
            y+=1
            text11 = font.render(str(int(y)),1,(255,255,255))
            screen.blit(text11, (560,16))
            if y==24:
                print("hit2")
                q=0
                y=0
                HP-=ED
                print("player, ",HP)
    else:
        y=0
#by taking in direction from player movement, this creates animation
def moveimage():
    global counter1
    global counter
    global xpos
    global ypos
    global d1
    if direction==0 or direction==1:
        if direction==0 and d1==True:#d1=shifting/sprinting
            d=-3
            d1=False
        elif direction==1 and d1==True:
            d=3
            d1=False
        elif direction==0 and d1==False:
            d=-2
        elif direction==1 and d1==False:
            d=2
        xpos+=d
        counter1+=1
        if counter1>5:
            counter1=0
            counter+=1
            if  counter>2: # 
                counter = 0
    elif direction==2 or direction==3:
        if direction==2 and d1==False:
            d=2
        elif direction==3 and d1==False:
            d=-2
        elif direction==2 and d1==True:
            d=3
            d1=False
        elif direction==3 and d1==True:
            d=-3
            d1=False
        ypos+=d
        counter1+=1
        if  counter1>5:
            counter1=0
            counter+=1
            if  counter>2: # 
                counter = 0
#enemy animation
def Emoveimage():
    global counter2
    global counter3
    counter3+=1
    if counter3>5:
            counter3=0
            counter2+=1
            if  counter2>2: # 
                counter2 = 0
#controls bow,       
def bowattack():
    global HE
    global PD
    global bx
    global by
    global d
    global bow
    global x
    text21 = font.render(str(int(x)),1,(255,255,255))
    #if person doesnt move reload bow
    if keys[pygame.K_DOWN]==False and keys[pygame.K_UP]==False and keys[pygame.K_RIGHT]==False and keys[pygame.K_LEFT]==False and keys[pygame.K_LSHIFT]==False:
        if x<95:
            x+=1
            print(x, " x")
            text21 = font.render(str(int(x)),1,(255,255,255))
    #unless they have agile upgrade see first lines for agile definition
    else:
        if Agile==True and x<95:
            x+=1
            print(x)
            text21 = font.render(str(int(x)),1,(255,255,255))
        # if they dont have agility, then thier timer resets
        elif Agile==False and x<95 and (keys[pygame.K_DOWN] or keys[pygame.K_UP] or keys[pygame.K_RIGHT] or keys[pygame.K_LEFT] or keys[pygame.K_LSHIFT]):
            x=0
            print (x)
            text21 = font.render(str(int(x)),1,(255,255,255))
    #if bow is reloaded and they press 'a' shoot the arrow
    if keys[pygame.K_a] and Bow==True and x>=94:
            bow=True
            for x in range (0,4):
                if direction==x:
                    d=x
    screen.blit(text21, (125,36))
    # bow movement control
    if bow==True:
        if d==0:
            bx-=7
        if d==1:
            bx+=7
        if d==2:
            by+=7
        if d==3:
            by-=7
            #detects a hit and maths it
        if bx+10>ex and bx<ex+54 and by+3>ey+2 and by<ey+61:
            HE-=PD
            print("hit3")
            bow=False
    #if the arrow hits a wall it go bye bye
    if bx<64:
            bow=False
    if bx+10>576:
            bow=False
    if by<64:
            bow=False
    if by+3>576:
            bow=False
    #reset bow when hitting something
    if bow==False:
        bx=xpos+32
        by=ypos+32
#controls health bar animation
def healthbars():
    global HP
    global HE
    global HB
    global EHB
    if HP<=100 and HP>90:
        HB  =[[1,1,1,1,1,1,1,1,1,1]]
    if HE<=100 and HP>90:
        EHB =[[1,1,1,1,1,1,1,1,1,1]]
        
    if HP<=90 and HP>80:
        HB  =[[0,1,1,1,1,1,1,1,1,1]]
    if HE<=90 and HP>80:
        EHB =[[0,1,1,1,1,1,1,1,1,1]]
        
    if HP<=80 and HP>70:
        HB  =[[0,0,1,1,1,1,1,1,1,1]]
    if HE<=80 and HP>70:
        EHB =[[0,0,1,1,1,1,1,1,1,1]]
        
    if HP<=70 and HP>60:
        HB  =[[0,0,0,1,1,1,1,1,1,1]]
    if HE<=70 and HP>60:
        EHB =[[0,0,0,1,1,1,1,1,1,1]]
        
    if HP<=60 and HP>50:
        HB  =[[0,0,0,0,1,1,1,1,1,1]]
    if HE<=60 and HP>50:
        EHB =[[0,0,0,0,1,1,1,1,1,1]]
        
    if HP<=50 and HP>40:
        HB  =[[0,0,0,0,0,1,1,1,1,1]]
    if HE<=50 and HP>40:
        EHB =[[0,0,0,0,0,1,1,1,1,1]]
        
    if HP<=40 and HP>30:
        HB  =[[0,0,0,0,0,0,1,1,1,1]]
    if HE<=40 and HP>30:
        EHB =[[0,0,0,0,0,0,1,1,1,1]]
        
    if HP<=30 and HP>20:
        HB  =[[0,0,0,0,0,0,0,1,1,1]]
    if HE<=30 and HP>20:
        EHB =[[0,0,0,0,0,0,0,1,1,1]]
        
    if HP<=20 and HP>10:
        HB  =[[0,0,0,0,0,0,0,0,1,1]]
    if HE<=20 and HP>10:
        EHB =[[0,0,0,0,0,0,0,0,1,1]]
        
    if HP<=10 and HP>0:
        HB  =[[0,0,0,0,0,0,0,0,0,1]]
    if HE<=10 and HP>0:
        EHB =[[0,0,0,0,0,0,0,0,0,1]]
    
    if HP<=0:
        HB  =[[0,0,0,0,0,0,0,0,0,0]]
    if HE<=0:
        EHB =[[0,0,0,0,0,0,0,0,0,0]]
#game grid for images 0=floor, 2=wall,3=doors
Map = [[2,2,2,2,3,3,2,2,2,2],
       [2,0,0,0,0,0,0,0,0,2],
       [2,0,0,0,0,0,0,0,0,2],
       [2,0,0,0,0,0,0,0,0,2],
       [2,0,0,0,0,0,0,0,0,2],
       [2,0,0,0,0,0,0,0,0,2],
       [2,0,0,0,0,0,0,0,0,2],
       [2,0,0,0,0,0,0,0,0,2],
       [2,0,0,0,0,0,0,0,0,2],
       [2,2,2,2,2,2,2,2,2,2],]
#health bars for enemy and player
HB  =[[1,1,1,1,1,1,1,1,1,1]]
EHB =[[1,1,1,1,1,1,1,1,1,1]]

while HP>0: #GAME LOOP
    clock.tick(60)
#input/output section
    #if this happens quit everthing
    events = pygame.event.get()
    for event in pygame.event.get() :
        if event.type == pygame.QUIT :
            pygame.quit()
            quit()
    #get key input
    keys = pygame.key.get_pressed()
    #player movemnt
    if keys[pygame.K_LEFT]:
        direction=0
        moveimage()
    if keys[pygame.K_RIGHT]:
        direction = 1
        moveimage()
    if keys[pygame.K_DOWN]:
        direction = 2
        moveimage()
    if keys[pygame.K_UP]:
        direction = 3
        moveimage()
    if keys[pygame.K_LSHIFT]:
        d1=True
        moveimage()
    #if they collide with wall bounce them back
    if xpos>512:
        if keys[pygame.K_LSHIFT]:
            xpos-=5
        else:
            xpos-=2
    if xpos<64:
        if keys[pygame.K_LSHIFT]:
            xpos+=5
        else:
            xpos+=2
    if ypos>512:
        if keys[pygame.K_LSHIFT]:
            ypos-=5
        else:
            ypos-=2
    if ypos<64:
        if keys[pygame.K_LSHIFT]:
            ypos+=5
        else:
            ypos+=2

    text12 = font.render(str(int(z)),1,(255,255,255))
    screen.blit(text12, (100,36))
    text21=font.render(str(int(x)),1,(255,255,255))
    screen.blit(text21, (100,252))
    healthbars()
    #if enemy dies give money
    if HE<=0 and HE>-100:
        money+=100
        HE=-100
        text15 = font.render(str(int(money)),1,(255,255,255))
    #If enemy dies allow for player to pull up shop
    if HE<=0:
        if keys[pygame.K_t]:
            pressed[SHOP]=True
        else:
            pressed[SHOP]=False
    #press y to go back from shop
    if keys[pygame.K_y]:
        pressed[PLAY]=True
    else:
        pressed[PLAY]=False
    if keys[pygame.K_c]:
        HE=100
#render section
    screen.fill((0, 0, 0))
    #grid image maths 
    for i in range (10):
            for j in range (10):
                if Map[j][i]==0:
                    floorrect = floor.get_rect(topleft=(i*64,j*64))
                    screen.blit(floor, floorrect)
                if Map[j][i]==2:
                    wallrect = wall.get_rect(topleft=(i*64,j*64))
                    screen.blit(wall, wallrect)
                if Map[j][i]==3:
                    doorrect = door.get_rect(topleft=(i*64,j*64))
                    screen.blit(door, doorrect)
    for i in range (10):
            for j in range (1):
                if HB[j][i]==1:
                    greenrect = green.get_rect(topleft=(i*16,j*64))
                    screen.blit(green, greenrect)
                if HB[j][i]==0:
                    redrect = red.get_rect(topleft=(i*16,j*64))
                    screen.blit(red, redrect)
    for i in range (10):
            for j in range (1):
                if EHB[j][i]==1:
                    greenrect = green.get_rect(topleft=(480+i*16,j*64))
                    screen.blit(green, greenrect)
                if EHB[j][i]==0:
                    redrect = red.get_rect(topleft=(480+i*16,j*64))
                    screen.blit(red, redrect)
    #where player animation maths happen
    if direction == 0:
        screen.blit(image, (xpos,ypos), (0+counter*64,128,64,64)) #each of my images are 32 wide, 48 tall
    if direction == 1:
        screen.blit(image, (xpos,ypos), (0+counter*64,192,64,64)) #each of my images are 32 wide, 48 tall
    if direction == 2:
        screen.blit(image, (xpos,ypos), (0+counter*64,0,64,64)) #each of my images are 32 wide, 48 tall
    if direction == 3:
        screen.blit(image, (xpos,ypos), (0+counter*64,64,64,64)) #each of my images are 32 wide, 48 tall
    #all this runs when playing gamestate runss
    if game_state == PLAYING:
        Map = [[2,2,2,2,3,3,2,2,2,2],
               [2,0,0,0,0,0,0,0,0,2],
               [2,0,0,0,0,0,0,0,0,2],
               [2,0,0,0,0,0,0,0,0,2],
               [2,0,0,0,0,0,0,0,0,2],  
               [2,0,0,0,0,0,0,0,0,2],
               [2,0,0,0,0,0,0,0,0,2],
               [2,0,0,0,0,0,0,0,0,2],
               [2,0,0,0,0,0,0,0,0,2],
               [2,2,2,2,2,2,2,2,2,2],]
        #as long as enemy lives, animate his movements
        if HE>0:
            if direction1 == 0:
                screen.blit(image1, (ex,ey), (0+counter2*64,128,64,64)) #each of my images are 32 wide, 48 tall
            if direction1 == 1:
                screen.blit(image1, (ex,ey), (0+counter2*64,192,64,64)) #each of my images are 32 wide, 48 tall
            if direction1 == 2:
                screen.blit(image1, (ex,ey), (0+counter2*64,0,64,64)) #each of my images are 32 wide, 48 tall
            if direction1 == 3:
                screen.blit(image1, (ex,ey), (0+counter2*64,64,64,64)) #each of my images are 32 wide, 48 tall
            enemymove()
            enemyattack()
            Emoveimage()
        playerattack()
        bowattack()
        screen.blit(text15, (80,56))
        #another function to allow for shop,...i could probably get rid of one
        if HE<=0:
            if pressed[SHOP] == True:
                game_state = SHOPPING
    # this code runs when your in the shop
    if game_state == SHOPPING:
        Map = [[2,2,2,2,2,2,2,2,2,2],
               [2,0,0,0,0,0,0,0,0,2],
               [2,0,0,2,0,0,2,0,0,2],
               [2,0,0,0,0,0,0,0,0,2],
               [2,0,0,0,0,0,0,0,0,2],  
               [2,0,0,2,0,0,0,0,0,2],
               [2,0,0,0,0,0,0,0,0,2],
               [2,0,0,0,0,0,0,0,0,2],
               [2,0,0,0,0,0,0,0,0,2],
               [2,2,2,2,2,2,2,2,2,2],]
        #text for the shop descriptions for the abilities
        if Bow==False:
            screen.blit(text, (64*3-50,64*2-20))
        screen.blit(text1, (64*6-50,64*2-20))
        screen.blit(text20, (64*3-50,64*5-20))
        screen.blit(text30, (180,190))
        # if the player is within the box then if market functions will happen
        if Bow==False:
            if xpos>64*3-10 and xpos<64*4+10 and ypos>64*2-10 and ypos<64*3+10:
                market()
        if HP<=99:
            if xpos>64*6-10 and xpos<64*7+10 and ypos>64*2-10 and ypos<64*3+10:
                market1()
        if Agile==False:
            if xpos>64*3-10 and xpos<64*4+10 and ypos>64*5-10 and ypos<64*6+10:
                market2()
        healthbars()
        if pressed[PLAY] == True:
            game_state = PLAYING
        playerattack()
        bowattack()
        text15 = font.render(str(int(money)),1,(255,255,255))
        screen.blit(text15, (80,56))
        screen.blit(text31, (320,190))
        screen.blit(text311, (330,206))
        screen.blit(text32, (150,382))
        screen.blit(text321, (150,398))
        screen.blit(text322, (160,414))
    # most of the lines here are user interface, like attack reaload timers
    screen.blit(text2, (0,16))
    screen.blit(text3, (350,16))
    screen.blit(text4, (0,36))
    screen.blit(text5, (0,56))
    screen.blit(text50, (0,608))
    screen.blit(text51, (0,624))
    # if player uses bow draw the arrow
    if bow==True:
        pygame.draw.rect(screen, (255,255,255), [bx,by,10,3])
    pygame.display.flip() #draw all the stuff from memory to screen
    
pygame.quit() #buh bye
